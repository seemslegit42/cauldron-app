import React, { useState } from 'react';
import { Vulnerability, ThreatSeverity } from '../types';
import { useAction } from 'wasp/client/operations';
import { runSecurityScan } from '../operations';

interface VulnerabilityScannerProps {
  vulnerabilities: Vulnerability[];
}

export const VulnerabilityScanner: React.FC<VulnerabilityScannerProps> = ({ vulnerabilities }) => {
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null);
  const [isScanning, setIsScanning] = useState(false);
  const [scanTarget, setScanTarget] = useState('');
  const [filterSeverity, setFilterSeverity] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  
  // Use the runSecurityScan action
  const runScanAction = useAction(runSecurityScan);
  
  // Filter vulnerabilities based on selected filters
  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSeverity = filterSeverity === 'all' || vuln.severity === filterSeverity;
    const matchesStatus = filterStatus === 'all' || vuln.status === filterStatus;
    return matchesSeverity && matchesStatus;
  });
  
  // Run vulnerability scan
  const handleRunScan = async () => {
    setIsScanning(true);
    
    try {
      // Call the security scan action
      await runScanAction({
        scanType: 'vulnerability',
        targets: scanTarget ? [scanTarget] : undefined,
        configuration: {
          scanDepth: 'full',
          includeNetworkScan: true,
          includeDependencyScan: true
        }
      });
      
      // In a real implementation, this would update the vulnerabilities list
      // For now, we'll just simulate a successful scan
      setTimeout(() => {
        setIsScanning(false);
        alert('Vulnerability scan completed. Results will appear shortly.');
      }, 2000);
    } catch (error) {
      console.error('Error running vulnerability scan:', error);
      alert('Failed to run vulnerability scan. Please try again.');
      setIsScanning(false);
    }
  };
  
  // Get color class based on vulnerability severity
  const getSeverityColorClass = (severity: ThreatSeverity) => {
    switch (severity) {
      case ThreatSeverity.CRITICAL:
        return 'bg-red-900/30 text-red-400 border-red-700';
      case ThreatSeverity.HIGH:
        return 'bg-orange-900/30 text-orange-400 border-orange-700';
      case ThreatSeverity.MEDIUM:
        return 'bg-yellow-900/30 text-yellow-400 border-yellow-700';
      case ThreatSeverity.LOW:
        return 'bg-blue-900/30 text-blue-400 border-blue-700';
      case ThreatSeverity.INFO:
        return 'bg-gray-900/30 text-gray-400 border-gray-700';
      default:
        return 'bg-gray-900/30 text-gray-400 border-gray-700';
    }
  };
  
  // Get badge class based on vulnerability status
  const getStatusBadgeClass = (status: string) => {
    switch (status) {
      case 'open':
        return 'bg-red-900/50 text-red-400 border-red-700';
      case 'in_progress':
        return 'bg-blue-900/50 text-blue-400 border-blue-700';
      case 'fixed':
        return 'bg-green-900/50 text-green-400 border-green-700';
      case 'wont_fix':
        return 'bg-yellow-900/50 text-yellow-400 border-yellow-700';
      case 'false_positive':
        return 'bg-gray-900/50 text-gray-400 border-gray-700';
      default:
        return 'bg-gray-900/50 text-gray-400 border-gray-700';
    }
  };
  
  // Format date for display
  const formatDate = (date: Date) => {
    return new Date(date).toLocaleString();
  };
  
  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <div className="lg:col-span-2">
        <div className="bg-gray-800 rounded-lg shadow-lg p-6 mb-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-white">Vulnerability Scanner</h2>
            <button 
              className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors disabled:bg-gray-600 disabled:cursor-not-allowed"
              onClick={handleRunScan}
              disabled={isScanning}
            >
              {isScanning ? 'Scanning...' : 'Run Scan'}
            </button>
          </div>
          
          {/* Scan Configuration */}
          <div className="bg-gray-900/50 rounded-lg p-4 border border-gray-700 mb-6">
            <h3 className="text-sm font-medium text-gray-400 mb-3">Scan Configuration</h3>
            <div className="mb-4">
              <label className="block text-sm text-gray-500 mb-1">Target (optional)</label>
              <input
                type="text"
                className="w-full bg-gray-700 border border-gray-600 rounded-md px-3 py-2 text-white"
                placeholder="Enter specific target (e.g., domain, IP, or leave blank for all)"
                value={scanTarget}
                onChange={(e) => setScanTarget(e.target.value)}
                disabled={isScanning}
              />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="network-scan"
                  className="h-4 w-4 rounded border-gray-600 bg-gray-700 text-red-600 focus:ring-red-500"
                  checked={true}
                  disabled={isScanning}
                />
                <label htmlFor="network-scan" className="ml-2 text-sm text-gray-300">
                  Include Network Scan
                </label>
              </div>
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="dependency-scan"
                  className="h-4 w-4 rounded border-gray-600 bg-gray-700 text-red-600 focus:ring-red-500"
                  checked={true}
                  disabled={isScanning}
                />
                <label htmlFor="dependency-scan" className="ml-2 text-sm text-gray-300">
                  Include Dependency Scan
                </label>
              </div>
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="code-scan"
                  className="h-4 w-4 rounded border-gray-600 bg-gray-700 text-red-600 focus:ring-red-500"
                  checked={true}
                  disabled={isScanning}
                />
                <label htmlFor="code-scan" className="ml-2 text-sm text-gray-300">
                  Include Code Scan
                </label>
              </div>
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="config-scan"
                  className="h-4 w-4 rounded border-gray-600 bg-gray-700 text-red-600 focus:ring-red-500"
                  checked={true}
                  disabled={isScanning}
                />
                <label htmlFor="config-scan" className="ml-2 text-sm text-gray-300">
                  Include Config Scan
                </label>
              </div>
            </div>
          </div>
          
          {/* Filters */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-1">Severity</label>
              <select 
                className="w-full bg-gray-700 border border-gray-600 rounded-md px-3 py-2 text-white"
                value={filterSeverity}
                onChange={(e) => setFilterSeverity(e.target.value)}
              >
                <option value="all">All Severities</option>
                {Object.values(ThreatSeverity).map(severity => (
                  <option key={severity} value={severity}>{severity}</option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-1">Status</label>
              <select 
                className="w-full bg-gray-700 border border-gray-600 rounded-md px-3 py-2 text-white"
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
              >
                <option value="all">All Statuses</option>
                <option value="open">Open</option>
                <option value="in_progress">In Progress</option>
                <option value="fixed">Fixed</option>
                <option value="wont_fix">Won't Fix</option>
                <option value="false_positive">False Positive</option>
              </select>
            </div>
          </div>
          
          {/* Vulnerabilities List */}
          <div>
            <h3 className="text-sm font-medium text-gray-400 mb-3">Detected Vulnerabilities</h3>
            
            {isScanning ? (
              <div className="bg-gray-900/50 rounded-lg p-6 border border-gray-700 text-center">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-red-500 mx-auto mb-4"></div>
                <p className="text-gray-400">Scanning for vulnerabilities...</p>
                <p className="text-xs text-gray-500 mt-2">This may take a few minutes</p>
              </div>
            ) : filteredVulnerabilities.length === 0 ? (
              <div className="bg-gray-900/50 rounded-lg p-6 border border-gray-700 text-center">
                <p className="text-gray-400">No vulnerabilities match your filters.</p>
                {vulnerabilities.length > 0 && (
                  <button 
                    className="mt-2 text-blue-400 hover:text-blue-300 text-sm"
                    onClick={() => {
                      setFilterSeverity('all');
                      setFilterStatus('all');
                    }}
                  >
                    Clear filters
                  </button>
                )}
              </div>
            ) : (
              <div className="space-y-4">
                {filteredVulnerabilities.map(vuln => (
                  <div 
                    key={vuln.id} 
                    className={`p-4 rounded-lg border ${getSeverityColorClass(vuln.severity)} cursor-pointer hover:bg-opacity-50 transition-colors`}
                    onClick={() => setSelectedVulnerability(vuln)}
                  >
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-medium">{vuln.title}</h3>
                        <p className="text-sm text-gray-300 mt-1 line-clamp-2">{vuln.description}</p>
                      </div>
                      <div className="flex flex-col items-end">
                        <span className="text-xs uppercase font-bold">{vuln.severity}</span>
                        <span className={`text-xs px-2 py-1 rounded-full mt-2 ${getStatusBadgeClass(vuln.status)}`}>
                          {vuln.status.replace('_', ' ')}
                        </span>
                      </div>
                    </div>
                    <div className="flex justify-between mt-3 text-xs text-gray-400">
                      <span>{vuln.cveId || 'No CVE'}</span>
                      <span>Exploitable: {vuln.exploitAvailable ? 'Yes' : 'No'}</span>
                      <span>Discovered: {formatDate(vuln.discoveredAt)}</span>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* Vulnerability Details Panel */}
      <div>
        <div className="bg-gray-800 rounded-lg shadow-lg p-6 sticky top-6">
          {selectedVulnerability ? (
            <>
              <div className="flex justify-between items-start mb-4">
                <h2 className="text-xl font-bold text-white">Vulnerability Details</h2>
                <span className={`text-xs px-2 py-1 rounded-full ${getStatusBadgeClass(selectedVulnerability.status)}`}>
                  {selectedVulnerability.status.replace('_', ' ')}
                </span>
              </div>
              
              <div className={`p-4 rounded-lg border mb-4 ${getSeverityColorClass(selectedVulnerability.severity)}`}>
                <h3 className="font-medium text-lg">{selectedVulnerability.title}</h3>
                <div className="flex justify-between mt-2">
                  <span className="text-xs uppercase font-bold">{selectedVulnerability.severity}</span>
                  <span className="text-xs">{selectedVulnerability.cveId || 'No CVE'}</span>
                </div>
              </div>
              
              <div className="space-y-4">
                <div>
                  <h4 className="text-sm font-medium text-gray-400 mb-1">Description</h4>
                  <p className="text-sm text-gray-300">{selectedVulnerability.description}</p>
                </div>
                
                <div>
                  <h4 className="text-sm font-medium text-gray-400 mb-1">Affected Systems</h4>
                  <div className="flex flex-wrap gap-2">
                    {selectedVulnerability.affectedSystems.map(system => (
                      <span key={system} className="text-xs bg-gray-700 text-gray-300 px-2 py-1 rounded">
                        {system}
                      </span>
                    ))}
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <h4 className="text-sm font-medium text-gray-400 mb-1">Exploitability</h4>
                    <div className="flex items-center">
                      <div className="w-full bg-gray-700 rounded-full h-2.5 mr-2">
                        <div 
                          className="h-2.5 rounded-full bg-red-500"
                          style={{ width: `${selectedVulnerability.exploitability * 10}%` }}
                        ></div>
                      </div>
                      <span className="text-sm text-gray-300">{selectedVulnerability.exploitability}/10</span>
                    </div>
                  </div>
                  <div>
                    <h4 className="text-sm font-medium text-gray-400 mb-1">Exploit Available</h4>
                    <span className={`text-sm ${selectedVulnerability.exploitAvailable ? 'text-red-400' : 'text-green-400'}`}>
                      {selectedVulnerability.exploitAvailable ? 'Yes' : 'No'}
                    </span>
                  </div>
                </div>
                
                {selectedVulnerability.remediationSteps && (
                  <div>
                    <h4 className="text-sm font-medium text-gray-400 mb-1">Remediation Steps</h4>
                    <p className="text-sm text-gray-300">{selectedVulnerability.remediationSteps}</p>
                  </div>
                )}
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <h4 className="text-sm font-medium text-gray-400 mb-1">Patch Available</h4>
                    <span className={`text-sm ${selectedVulnerability.patchAvailable ? 'text-green-400' : 'text-red-400'}`}>
                      {selectedVulnerability.patchAvailable ? 'Yes' : 'No'}
                    </span>
                  </div>
                  {selectedVulnerability.patchAvailable && selectedVulnerability.patchLink && (
                    <div>
                      <h4 className="text-sm font-medium text-gray-400 mb-1">Patch Link</h4>
                      <a 
                        href={selectedVulnerability.patchLink} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="text-sm text-blue-400 hover:text-blue-300"
                      >
                        View Patch
                      </a>
                    </div>
                  )}
                </div>
                
                <div className="pt-4 flex space-x-2">
                  <button 
                    className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded text-sm font-medium flex-1"
                    onClick={() => alert(`Marking vulnerability as in progress: ${selectedVulnerability.id}`)}
                  >
                    Mark In Progress
                  </button>
                  <button 
                    className="bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded text-sm font-medium flex-1"
                    onClick={() => alert(`Marking vulnerability as fixed: ${selectedVulnerability.id}`)}
                  >
                    Mark Fixed
                  </button>
                </div>
              </div>
            </>
          ) : (
            <div className="text-center py-8">
              <div className="text-gray-500 mb-2">Select a vulnerability to view details</div>
              <p className="text-sm text-gray-400">
                Click on any vulnerability from the list to view detailed information and take action.
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
